
Input:
You are a cutting-edge AI researcher generating complete, executable code for research paper experiments with Hydra configuration management.

Based on the research method in # Current Research Method and experimental design in # Experimental Design, generate production-ready experiment code that integrates with Hydra for configuration management.

# Instructions: Complete Experiment Code Generation

## Core Requirements
- COMPLETE IMPLEMENTATION: Every component must be fully functional, production-ready, publication-worthy code. No "omitted for brevity", no "simplified version", no TODO, PLACEHOLDER, pass, or ...
- PYTORCH EXCLUSIVELY: Use PyTorch as the deep learning framework
- HYDRA INTEGRATION: Use Hydra to manage all experiment configurations from `config/run/*.yaml` files
- COMPLETE DATA PIPELINE: Full data loading and preprocessing implementation

## Hydra Configuration Structure
Each run config file (`config/run/{run_id}.yaml`) contains:
- run_id: Unique identifier for this run
- method: The method name (baseline, proposed, ablation, etc.)
- model: Model-specific parameters (name, architecture details, hyperparameters)
- dataset: Dataset-specific parameters (name, preprocessing settings, split ratios)
- training: Training hyperparameters (learning rate, batch size, epochs, optimizer settings, validation split)
- optuna: Hyperparameter search space definition for Optuna optimization

## Standard Output Content Requirements
- Experiment description: Before printing experimental results, the standard output must include a detailed description of the experiment.
- Experimental numerical data: All experimental data obtained in the experiments must be output to the standard output.

## Command Line Interface
The generated code must support the following CLI:
```bash
# Run a single experiment (specified by Hydra)
uv run python -u -m src.main run={run_id} results_dir={path}
```

The `run` argument specifies which experiment to run (matching a run_id from config/run/*.yaml).
The `results_dir` argument is passed from the GitHub Actions workflow and specifies where all outputs should be saved.

## Output Structure
Generate complete code for these files ONLY. Do not create any additional files beyond this structure:

### Script Structure (ExperimentCode format)
- `src/train.py`: Logic to run a single experiment variation. Uses Hydra config to load parameters. It is called as a subprocess by main.py. It must save final metrics to a structured file (e.g., results.json).
- `src/evaluate.py`: Comparison and visualization tool. It reads the result files from all experiment variations and generates comparison figures.
- `src/preprocess.py`: Complete preprocessing pipeline implementation for the specified datasets
- `src/model.py`: Complete model architecture implementations. It will contain classes for baseline, proposed, and ablation models. Implement all architectures from scratch.
- `src/main.py`: The main orchestrator script. It receives a run_id via Hydra, launches train.py for that specific experiment, manages subprocess, collects and consolidates logs, and finally triggers evaluate.py if needed.
- `pyproject.toml`: Complete project dependencies (include hydra-core, optuna if needed)
- `config/config.yaml`: Main Hydra configuration file that defines the list of all experiment run_ids


### Key Implementation Focus Areas
1. Hydra-Driven Configuration: All parameters loaded from run configs dynamically
2. Algorithm Core: Full implementation of the proposed method with proper abstraction
3. Sequential Execution: main.py executes run variations one at a time in sequential order
4. Configuration Driven: The entire workflow must be driven by the YAML configuration files
5. Evaluation Consistency: Identical metrics calculation, result formatting, and comparison logic. evaluate.py must operate on the saved results after all training is complete
6. Structured Logging:
   - train.py: Print JSON-formatted experimental data (epoch-wise metrics, final results) to stdout using `print(json.dumps({...}))`. Always include `"run_id"` field (use the run variation name from config).
   - evaluate.py: Print JSON-formatted comparison results to stdout
   - main.py: For each subprocess, redirect stdout/stderr to `{results_dir}/{run_id}/stdout.log` and `{results_dir}/{run_id}/stderr.log` while also forwarding to main process stdout/stderr (using tee-like logic) so logs are captured both structurally and by GitHub Actions.


## Code Validation Feedback


**Previous Validation Issue**: Code does not satisfy multiple mandatory criteria:
1. Incomplete model implementation – text DistilBERT branch in src/model.py raises NotImplementedError, which breaks run comparative-2-DistilBERT-base-66M-alpaca-cleaned.
2. Data pipeline for Alpaca creates single-class labels, leading to invalid cross-entropy training and meaningless results.
3. config/config.yaml lists only one run_id; it must enumerate all four provided runs and the associated files config/run/*.yaml must exist inside the repo. At present they are missing, so Hydra will fail at startup.
4. Evaluation figure saved as .png, not PDF as required.
5. Minor: CrossEntropy with num_classes=1 is invalid and will crash if reached.
Because of these issues, the code is not immediately executable or publication-ready.
**Action Required**: Address this issue in the implementation.



# Experimental Environment
cpu
RAM：500 MB

# Current Research Method (Target for Experiment Design)
We compare lightweight model architectures (MobileNetV2-0.5 and DistilBERT-base) across vision and language tasks to evaluate their efficiency and performance trade-offs.

# Experimental Design
- Strategy: 

# Experiment Runs

- Run ID: comparative-2-MobileNetV2-0.5-3.5M-CIFAR-10
  Method: comparative-2
  Model: MobileNetV2-0.5-3.5M
  Dataset: CIFAR-10
  Config File: config/run/comparative-2-MobileNetV2-0.5-3.5M-CIFAR-10.yaml
  
  Config Content:
  ```yaml
  run_id: comparative-2-MobileNetV2-0.5-3.5M-CIFAR-10
method: comparative-2
model:
  name: MobileNetV2
  variant: 0.5
  parameters: 3.5M
  pretrained: false
  width_mult: 0.5
  dropout: 0.2
dataset:
  name: CIFAR-10
  splits:
    train: 45000
    val: 5000
    test: 10000
  image_size: 32
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std: [0.2023, 0.1994, 0.2010]
  augmentations:
    random_crop: true
    random_flip: horizontal
training:
  epochs: 50
  batch_size: 64
  learning_rate: 0.05
  optimizer: sgd
  momentum: 0.9
  weight_decay: 0.0005
  lr_scheduler:
    type: cosine
    T_max: 50
optuna:
  n_trials: 25
  search_space:
    learning_rate:
      type: loguniform
      low: 0.001
      high: 0.1
    batch_size:
      type: categorical
      choices: [32, 64, 128]
    momentum:
      type: uniform
      low: 0.7
      high: 0.95
    weight_decay:
      type: loguniform
      low: 1e-5
      high: 1e-3

  ```
  

- Run ID: comparative-2-MobileNetV2-0.5-3.5M-alpaca-cleaned
  Method: comparative-2
  Model: MobileNetV2-0.5-3.5M
  Dataset: alpaca-cleaned
  Config File: config/run/comparative-2-MobileNetV2-0.5-3.5M-alpaca-cleaned.yaml
  
  Config Content:
  ```yaml
  run_id: comparative-2-MobileNetV2-0.5-3.5M-alpaca-cleaned
method: comparative-2
model:
  name: MobileNetV2
  variant: 0.5
  parameters: 3.5M
  pretrained: false
  input_adapter:
    type: char_cnn
    embedding_dim: 256
dataset:
  name: alpaca-cleaned
  task: instruction_following
  max_seq_length: 512
  tokenizer: char
training:
  epochs: 3
  batch_size: 16
  learning_rate: 0.001
  optimizer: adam
  weight_decay: 0.01
  gradient_accumulation_steps: 2
optuna:
  n_trials: 15
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-4
      high: 1e-2
    batch_size:
      type: categorical
      choices: [8, 16, 32]
    weight_decay:
      type: loguniform
      low: 1e-5
      high: 1e-1

  ```
  

- Run ID: comparative-2-DistilBERT-base-66M-CIFAR-10
  Method: comparative-2
  Model: DistilBERT-base-66M
  Dataset: CIFAR-10
  Config File: config/run/comparative-2-DistilBERT-base-66M-CIFAR-10.yaml
  
  Config Content:
  ```yaml
  run_id: comparative-2-DistilBERT-base-66M-CIFAR-10
method: comparative-2
model:
  name: distilbert-base-uncased
  parameters: 66M
  pretrained: true
  modality_adapter:
    type: linear_patch_embedding
    patch_size: 4
    sequence_length: 64
dataset:
  name: CIFAR-10
  splits:
    train: 45000
    val: 5000
    test: 10000
  image_size: 32
  normalization:
    mean: [0.4914, 0.4822, 0.4465]
    std: [0.2023, 0.1994, 0.2010]
training:
  epochs: 10
  batch_size: 32
  learning_rate: 0.0001
  optimizer: adamw
  weight_decay: 0.01
  lr_scheduler:
    type: linear
    warmup_steps: 500
optuna:
  n_trials: 20
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-5
      high: 1e-3
    batch_size:
      type: categorical
      choices: [16, 32, 64]
    patch_size:
      type: categorical
      choices: [2, 4, 8]
    weight_decay:
      type: loguniform
      low: 1e-5
      high: 1e-2

  ```
  

- Run ID: comparative-2-DistilBERT-base-66M-alpaca-cleaned
  Method: comparative-2
  Model: DistilBERT-base-66M
  Dataset: alpaca-cleaned
  Config File: config/run/comparative-2-DistilBERT-base-66M-alpaca-cleaned.yaml
  
  Config Content:
  ```yaml
  run_id: comparative-2-DistilBERT-base-66M-alpaca-cleaned
method: comparative-2
model:
  name: distilbert-base-uncased
  parameters: 66M
  pretrained: true
dataset:
  name: alpaca-cleaned
  task: instruction_following
  max_seq_length: 512
  tokenizer: sentencepiece
training:
  epochs: 3
  batch_size: 16
  learning_rate: 2e-5
  optimizer: adamw
  weight_decay: 0.01
  lr_scheduler:
    type: linear
    warmup_steps: 500
optuna:
  n_trials: 25
  search_space:
    learning_rate:
      type: loguniform
      low: 1e-5
      high: 1e-3
    batch_size:
      type: categorical
      choices: [8, 16, 32]
    weight_decay:
      type: loguniform
      low: 1e-5
      high: 1e-2

  ```
  


# External Resources (Use these for implementation)



# ========================================
# WandB Integration Requirements
# ========================================

## Overview
In addition to the common requirements above, integrate WandB (Weights & Biases) for experiment tracking and visualization.

## Additional Requirements
- WANDB INTEGRATION: Initialize WandB with proper project/entity from config, log metrics/artifacts, and save wandb_run_id to metadata
- WANDB METADATA: Save WandB run information to `.research/iteration{experiment_iteration}/wandb_metadata.json` with structure:
  ```json
  {
    "wandb_entity": "gengaru617",
    "wandb_project": "251014-test",
    "wandb_run_id": "<actual_run_id_from_wandb>"
  }
  ```
- Initialization: Initialize WandB at the start of each training run with config from Hydra
- Metric Logging: Log all training/validation metrics to WandB (loss, accuracy, etc.)
- Artifact Tracking: Log model checkpoints and important artifacts
- Metadata Saving: After WandB initialization, save the wandb_run_id to `.research/iteration{experiment_iteration}/wandb_metadata.json`
- Configuration Logging: Log all hyperparameters and config to WandB
- Figure Upload: Upload figures as WandB artifacts instead of (or in addition to) saving locally

## WandB Configuration
- Entity: gengaru617
- Project: 251014-test

## Environment Variables
- `WANDB_API_KEY`: Available as a GitHub Actions secret for WandB authentication

## Modified Output Requirements
- WandB run URL: Print the WandB run URL to stdout for easy access to detailed logs
- Figures: Upload figures as WandB artifacts (local saving is optional)

## Modified Config Structure
Each run config file should also include:
- wandb: WandB configuration (entity, project, run_name, tags)

## Modified Dependencies
- pyproject.toml: Include `wandb` package

## WandB Metadata File Location
The wandb_metadata.json file must be saved to:
- Path: `.research/iteration{experiment_iteration}/wandb_metadata.json`
- The experiment_iteration should be passed as an environment variable or config parameter
- The file should be created immediately after WandB run initialization in train.py



Generate complete, production-ready experiment code that integrates with Hydra configuration system.
Output:
{
    "train_py": "import json\nimport os\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import Dict, Tuple, Any, Optional\n\nimport hydra\nfrom omegaconf import DictConfig, OmegaConf\nimport torch\nfrom torch import nn\nfrom torch.optim import SGD, AdamW, Adam\nfrom torch.utils.data import DataLoader\nfrom torch.nn.utils import clip_grad_norm_\n\nimport wandb\n\nfrom .preprocess import get_dataloaders\nfrom .model import get_model\n\n# -----------------------------------------------------------------------------\n# Helper utilities\n# -----------------------------------------------------------------------------\n\ndef accuracy(pred: torch.Tensor, target: torch.Tensor) -> float:\n    \"\"\"Top-1 accuracy (classification).\"\"\"\n    correct = (pred.argmax(dim=-1) == target).float().sum().item()\n    return correct / target.size(0)\n\n\ndef epoch_loop(model: nn.Module,\n               loader: DataLoader,\n               criterion: nn.Module,\n               optimizer: Optional[torch.optim.Optimizer],\n               device: torch.device) -> Tuple[float, float]:\n    \"\"\"Run one epoch. If optimizer is None -> evaluation mode.\"\"\"\n    if optimizer is None:\n        model.eval()\n    else:\n        model.train()\n\n    total_loss, total_acc, nb = 0.0, 0.0, 0\n\n    for batch in loader:\n        if isinstance(batch, dict):\n            x, y = batch['input'], batch['label']\n        else:\n            x, y = batch\n        x, y = x.to(device), y.to(device)\n\n        with torch.set_grad_enabled(optimizer is not None):\n            out = model(x)\n            loss = criterion(out, y)\n            if optimizer is not None:\n                optimizer.zero_grad()\n                loss.backward()\n                clip_grad_norm_(model.parameters(), max_norm=5.0)\n                optimizer.step()\n        total_loss += loss.item() * x.size(0)\n        total_acc += accuracy(out.detach(), y) * x.size(0)\n        nb += x.size(0)\n\n    return total_loss / nb, total_acc / nb\n\n\n# -----------------------------------------------------------------------------\n# Main training entrypoint (Hydra)\n# -----------------------------------------------------------------------------\n\n@hydra.main(version_base=None, config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:  # noqa: C901\n    run_id: str = cfg.run\n    if run_id not in cfg.runs:\n        raise KeyError(f\"run_id `{run_id}` not defined in config.runs\")\n\n    # Merge the run-specific sub-config into root for convenience\n    run_cfg: DictConfig = cfg.runs[run_id]\n\n    results_root = Path(hydra.utils.get_original_cwd()) / cfg.results_dir / run_id\n    results_root.mkdir(parents=True, exist_ok=True)\n\n    # ---------------------------------------------------------------------\n    # Print experiment description (MANDATORY)\n    # ---------------------------------------------------------------------\n    description = {\n        \"run_id\": run_id,\n        \"method\": run_cfg.method,\n        \"model\": OmegaConf.to_container(run_cfg.model, resolve=True),\n        \"dataset\": OmegaConf.to_container(run_cfg.dataset, resolve=True),\n        \"training\": OmegaConf.to_container(run_cfg.training, resolve=True),\n    }\n    print(\"EXPERIMENT DESCRIPTION:\\n\" + json.dumps(description, indent=2))\n\n    # ---------------------------------------------------------------------\n    # Initialise WandB\n    # ---------------------------------------------------------------------\n    wandb_cfg = run_cfg.get(\"wandb\", {})\n    wandb_run = wandb.init(\n        project=wandb_cfg.get(\"project\", cfg.wandb.project),\n        entity=wandb_cfg.get(\"entity\", cfg.wandb.entity),\n        name=wandb_cfg.get(\"run_name\", run_id),\n        tags=wandb_cfg.get(\"tags\", []),\n        config=OmegaConf.to_container(run_cfg, resolve=True),\n        reinit=True,\n    )\n    print(f\"WandB URL: {wandb_run.get_url()}\")\n\n    # Save metadata JSON\n    meta_dir = Path(hydra.utils.get_original_cwd()) / f\".research/iteration{os.getenv('EXPERIMENT_ITERATION', 0)}\"\n    meta_dir.mkdir(parents=True, exist_ok=True)\n    with open(meta_dir / \"wandb_metadata.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump({\n            \"wandb_entity\": wandb_run.entity,\n            \"wandb_project\": wandb_run.project,\n            \"wandb_run_id\": wandb_run.id,\n        }, f, indent=2)\n\n    # ---------------------------------------------------------------------\n    # Data preparation\n    # ---------------------------------------------------------------------\n    device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n\n    train_loader, val_loader, test_loader, num_classes = get_dataloaders(run_cfg)\n\n    # ---------------------------------------------------------------------\n    # Model & Optimization\n    # ---------------------------------------------------------------------\n    model = get_model(run_cfg, num_classes=num_classes).to(device)\n\n    crit = nn.CrossEntropyLoss()\n\n    optim_name = run_cfg.training.optimizer.lower()\n    if optim_name == \"sgd\":\n        optimizer = SGD(\n            model.parameters(),\n            lr=run_cfg.training.learning_rate,\n            momentum=run_cfg.training.get(\"momentum\", 0),\n            weight_decay=run_cfg.training.weight_decay,\n        )\n    elif optim_name in [\"adam\", \"adamw\"]:\n        optimizer_cls = AdamW if optim_name == \"adamw\" else Adam\n        optimizer = optimizer_cls(\n            model.parameters(),\n            lr=run_cfg.training.learning_rate,\n            weight_decay=run_cfg.training.weight_decay,\n        )\n    else:\n        raise ValueError(f\"Unsupported optimizer {optim_name}\")\n\n    # Scheduler (simple cosine / linear warmup)\n    scheduler_cfg = run_cfg.training.get(\"lr_scheduler\", None)\n    scheduler = None\n    if scheduler_cfg:\n        if scheduler_cfg.type == \"cosine\":\n            scheduler = torch.optim.lr_scheduler.CosineAnnealingLR(\n                optimizer, T_max=scheduler_cfg.T_max)\n        elif scheduler_cfg.type == \"linear\":\n            def lr_lambda(step):\n                warm = scheduler_cfg.warmup_steps\n                total = max(run_cfg.training.epochs * len(train_loader), 1)\n                if step < warm:\n                    return step / warm\n                return max((total - step) / (total - warm), 0)\n            scheduler = torch.optim.lr_scheduler.LambdaLR(optimizer, lr_lambda)\n\n    # ---------------------------------------------------------------------\n    # Training loop\n    # ---------------------------------------------------------------------\n    history = {\"epoch\": [], \"train_loss\": [], \"train_acc\": [], \"val_loss\": [], \"val_acc\": []}\n\n    for epoch in range(1, run_cfg.training.epochs + 1):\n        t0 = time.time()\n        tr_loss, tr_acc = epoch_loop(model, train_loader, crit, optimizer, device)\n        val_loss, val_acc = epoch_loop(model, val_loader, crit, None, device)\n        if scheduler is not None:\n            scheduler.step()\n\n        epoch_metrics = {\n            \"epoch\": epoch,\n            \"train_loss\": tr_loss,\n            \"train_acc\": tr_acc,\n            \"val_loss\": val_loss,\n            \"val_acc\": val_acc,\n            \"elapsed_sec\": time.time() - t0,\n        }\n        history[\"epoch\"].append(epoch)\n        history[\"train_loss\"].append(tr_loss)\n        history[\"train_acc\"].append(tr_acc)\n        history[\"val_loss\"].append(val_loss)\n        history[\"val_acc\"].append(val_acc)\n\n        wandb.log({**epoch_metrics})\n        print(json.dumps(epoch_metrics))\n\n    # ---------------------------------------------------------------------\n    # Final evaluation on test set\n    # ---------------------------------------------------------------------\n    test_loss, test_acc = epoch_loop(model, test_loader, crit, None, device)\n    wandb.log({\"test_loss\": test_loss, \"test_acc\": test_acc})\n\n    results = {\n        **description,\n        \"history\": history,\n        \"test\": {\"loss\": test_loss, \"acc\": test_acc},\n        \"wandb_url\": wandb_run.get_url(),\n    }\n\n    with open(results_root / \"results.json\", \"w\", encoding=\"utf-8\") as f:\n        json.dump(results, f, indent=2)\n\n    # Save checkpoint as W&B artifact\n    ckpt_path = results_root / \"model.pt\"\n    torch.save(model.state_dict(), ckpt_path)\n    wandb.save(str(ckpt_path))\n\n    wandb.finish()\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "evaluate_py": "import json\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict\n\nimport hydra\nfrom omegaconf import DictConfig\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport wandb\n\n\n@hydra.main(version_base=None, config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig) -> None:\n    results_root = Path(hydra.utils.get_original_cwd()) / cfg.results_dir\n    all_results: List[Dict] = []\n\n    for run_id in cfg.runs.keys():\n        res_file = results_root / run_id / \"results.json\"\n        if not res_file.exists():\n            print(f\"[WARN] Missing results for {run_id}\")\n            continue\n        with open(res_file, \"r\", encoding=\"utf-8\") as f:\n            all_results.append(json.load(f))\n\n    if not all_results:\n        print(\"No results found. Exiting evaluation.\")\n        sys.exit(0)\n\n    # Build comparison dataframe\n    df = pd.DataFrame([\n        {\n            \"run_id\": r[\"run_id\"],\n            \"method\": r[\"method\"],\n            \"model\": r[\"model\"][\"name\"],\n            \"dataset\": r[\"dataset\"][\"name\"],\n            \"test_acc\": r[\"test\"][\"acc\"],\n            \"test_loss\": r[\"test\"][\"loss\"],\n        } for r in all_results\n    ])\n\n    print(\"\\nAggregated Results:\\n\" + df.to_string(index=False))\n\n    # Plot comparison\n    fig, ax = plt.subplots(figsize=(8, 4))\n    df.plot.bar(x=\"run_id\", y=\"test_acc\", ax=ax, legend=False, color=\"skyblue\")\n    ax.set_ylabel(\"Test Accuracy\")\n    ax.set_title(\"Model Comparison – Test Accuracy\")\n    fig.tight_layout()\n\n    pdf_path = results_root / \"comparison.pdf\"\n    fig.savefig(pdf_path)\n\n    # Upload to WandB (optional)\n    for r in all_results:\n        if \"wandb_url\" in r:\n            wandb_run = wandb.Api().run(r[\"wandb_url\"].replace(\"https://wandb.ai/\", \"\"))\n            wandb_run.log_artifact(str(pdf_path))\n\n    summary = {\n        \"best_run\": df.sort_values(\"test_acc\", ascending=False).iloc[0].to_dict(),\n        \"worst_run\": df.sort_values(\"test_acc\", ascending=True).iloc[0].to_dict(),\n    }\n    print(json.dumps(summary, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "preprocess_py": "import json\nimport random\nimport urllib.request\nfrom pathlib import Path\nfrom typing import Tuple, List\n\nimport torch\nfrom torch.utils.data import DataLoader, Dataset, random_split\nimport torchvision.transforms as T\nfrom torchvision.datasets import CIFAR10\n\n# -----------------------------------------------------------------------------\n# Character-level tokenizer for Alpaca dataset\n# -----------------------------------------------------------------------------\n\nclass CharTokenizer:\n    def __init__(self):\n        ascii_chars = [chr(i) for i in range(32, 127)]  # printable chars\n        self.char2idx = {c: i + 2 for i, c in enumerate(ascii_chars)}\n        self.char2idx[\"<pad>\"] = 0\n        self.char2idx[\"<unk>\"] = 1\n        self.idx2char = {i: c for c, i in self.char2idx.items()}\n\n    def encode(self, s: str, max_length: int) -> List[int]:\n        ids = [self.char2idx.get(c, 1) for c in s[:max_length]]\n        if len(ids) < max_length:\n            ids += [0] * (max_length - len(ids))\n        return ids\n\n    def vocab_size(self):\n        return len(self.char2idx)\n\n# -----------------------------------------------------------------------------\n# Alpaca dataset & preprocessing\n# -----------------------------------------------------------------------------\n\nALPACA_URL = \"https://raw.githubusercontent.com/tatsu-lab/stanford_alpaca/main/alpaca_data_cleaned.json\"\n\nclass AlpacaCharDataset(Dataset):\n    def __init__(self, records: List[dict], tokenizer: CharTokenizer, max_seq_len: int):\n        self.records = records\n        self.tokenizer = tokenizer\n        self.max_len = max_seq_len\n        # Create a simple binary classification label (instruction length)\n        self.labels = [0 if len(r[\"instruction\"]) < 64 else 1 for r in records]\n        assert len(set(self.labels)) > 1, \"Dataset has only one class – invalid for classification\"\n\n    def __len__(self):\n        return len(self.records)\n\n    def __getitem__(self, idx):\n        rec = self.records[idx]\n        tokens = torch.tensor(self.tokenizer.encode(rec[\"instruction\"] + \" \" + rec.get(\"input\", \"\"), self.max_len), dtype=torch.long)\n        label = torch.tensor(self.labels[idx], dtype=torch.long)\n        return {\"input\": tokens, \"label\": label}\n\n# -----------------------------------------------------------------------------\n# Data loader factory\n# -----------------------------------------------------------------------------\n\ndef get_cifar10_dataloaders(cfg):\n    mean, std = cfg.dataset.normalization.mean, cfg.dataset.normalization.std\n    image_size = cfg.dataset.image_size\n\n    train_tfms = [T.Resize((image_size, image_size))]\n    if cfg.dataset.augmentations.random_crop:\n        train_tfms.append(T.RandomCrop(image_size, padding=4))\n    if cfg.dataset.augmentations.random_flip == \"horizontal\":\n        train_tfms.append(T.RandomHorizontalFlip())\n    train_tfms += [T.ToTensor(), T.Normalize(mean, std)]\n\n    test_tfms = [T.Resize((image_size, image_size)), T.ToTensor(), T.Normalize(mean, std)]\n\n    root_dir = Path(\".cache/datasets\")\n    root_dir.mkdir(parents=True, exist_ok=True)\n\n    full_train = CIFAR10(root_dir, train=True, download=True, transform=T.Compose(train_tfms))\n    test_set = CIFAR10(root_dir, train=False, download=True, transform=T.Compose(test_tfms))\n\n    train_len = cfg.dataset.splits.train\n    val_len = cfg.dataset.splits.val\n    train_set, val_set = random_split(full_train, [train_len, val_len])\n\n    dl_kwargs = dict(batch_size=cfg.training.batch_size, num_workers=2, pin_memory=True)\n    train_loader = DataLoader(train_set, shuffle=True, **dl_kwargs)\n    val_loader = DataLoader(val_set, shuffle=False, **dl_kwargs)\n    test_loader = DataLoader(test_set, shuffle=False, **dl_kwargs)\n\n    return train_loader, val_loader, test_loader, 10  # 10 classes\n\n\ndef _download_alpaca(local_path: Path):\n    print(\"Downloading Alpaca dataset ...\")\n    urllib.request.urlretrieve(ALPACA_URL, local_path)\n\n\ndef get_alpaca_dataloaders(cfg):\n    root_dir = Path(\".cache/datasets\")\n    root_dir.mkdir(parents=True, exist_ok=True)\n    json_path = root_dir / \"alpaca_cleaned.json\"\n    if not json_path.exists():\n        _download_alpaca(json_path)\n\n    with open(json_path, \"r\", encoding=\"utf-8\") as f:\n        records = json.load(f)\n\n    random.shuffle(records)\n    n_total = len(records)\n    n_train = int(0.9 * n_total)\n    n_val = int(0.05 * n_total)\n    train_records = records[:n_train]\n    val_records = records[n_train:n_train + n_val]\n    test_records = records[n_train + n_val:]\n\n    tokenizer = CharTokenizer()\n\n    train_ds = AlpacaCharDataset(train_records, tokenizer, cfg.dataset.max_seq_length)\n    val_ds = AlpacaCharDataset(val_records, tokenizer, cfg.dataset.max_seq_length)\n    test_ds = AlpacaCharDataset(test_records, tokenizer, cfg.dataset.max_seq_length)\n\n    dl_kwargs = dict(batch_size=cfg.training.batch_size, num_workers=0, pin_memory=True)\n    train_loader = DataLoader(train_ds, shuffle=True, **dl_kwargs)\n    val_loader = DataLoader(val_ds, shuffle=False, **dl_kwargs)\n    test_loader = DataLoader(test_ds, shuffle=False, **dl_kwargs)\n\n    return train_loader, val_loader, test_loader, 2  # binary classification\n\n\ndef get_dataloaders(cfg):\n    if cfg.dataset.name.lower() == \"cifar-10\":\n        return get_cifar10_dataloaders(cfg)\n    elif \"alpaca\" in cfg.dataset.name:\n        return get_alpaca_dataloaders(cfg)\n    else:\n        raise ValueError(f\"Unsupported dataset {cfg.dataset.name}\")\n",
    "model_py": "import math\nfrom typing import Any\n\nimport torch\nfrom torch import nn\nimport torchvision.models as tvm\nfrom transformers import DistilBertModel, DistilBertConfig\n\n# -----------------------------------------------------------------------------\n# MobileNetV2 wrapper\n# -----------------------------------------------------------------------------\n\nclass MobileNetV2Classifier(nn.Module):\n    def __init__(self, width_mult: float, num_classes: int, pretrained: bool, dropout: float):\n        super().__init__()\n        self.net = tvm.mobilenet_v2(pretrained=pretrained, width_mult=width_mult)\n        in_feat = self.net.classifier[1].in_features\n        self.net.classifier = nn.Sequential(\n            nn.Dropout(dropout), nn.Linear(in_feat, num_classes)\n        )\n\n    def forward(self, x):\n        return self.net(x)\n\n# -----------------------------------------------------------------------------\n# Char-level CNN for Alpaca\n# -----------------------------------------------------------------------------\n\nclass CharCNNClassifier(nn.Module):\n    def __init__(self, vocab_size: int, embedding_dim: int, num_classes: int):\n        super().__init__()\n        self.embed = nn.Embedding(vocab_size, embedding_dim, padding_idx=0)\n        kernel_sizes = [3, 4, 5]\n        self.convs = nn.ModuleList([\n            nn.Conv1d(embedding_dim, 128, k) for k in kernel_sizes\n        ])\n        self.dropout = nn.Dropout(0.3)\n        self.fc = nn.Linear(128 * len(kernel_sizes), num_classes)\n\n    def forward(self, x):  # x: (B, L)\n        x = self.embed(x).transpose(1, 2)  # (B, E, L)\n        feats = [torch.relu(conv(x)).max(dim=2)[0] for conv in self.convs]\n        x = torch.cat(feats, dim=1)\n        x = self.dropout(x)\n        return self.fc(x)\n\n# -----------------------------------------------------------------------------\n# DistilBERT for sequence classification\n# -----------------------------------------------------------------------------\n\nclass DistilBERTSequenceClassifier(nn.Module):\n    def __init__(self, pretrained_name: str, num_classes: int):\n        super().__init__()\n        self.bert = DistilBertModel.from_pretrained(pretrained_name)\n        hidden = self.bert.config.hidden_size\n        self.classifier = nn.Linear(hidden, num_classes)\n\n    def forward(self, input_ids, attention_mask=None):\n        if attention_mask is None:\n            attention_mask = input_ids.ne(0).long()\n        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n        pooled = outputs.last_hidden_state[:, 0]  # CLS token\n        return self.classifier(pooled)\n\n# -----------------------------------------------------------------------------\n# DistilBERT for image classification via patch embedding\n# -----------------------------------------------------------------------------\n\nclass PatchEmbedding(nn.Module):\n    def __init__(self, in_ch: int, hidden_size: int, patch_size: int):\n        super().__init__()\n        self.proj = nn.Conv2d(in_ch, hidden_size, kernel_size=patch_size, stride=patch_size)\n\n    def forward(self, x):  # (B, C, H, W)\n        x = self.proj(x)  # (B, hidden, H/P, W/P)\n        x = x.flatten(2).transpose(1, 2)  # (B, N, hidden)\n        return x\n\nclass DistilBERTImageClassifier(nn.Module):\n    def __init__(self, pretrained_name: str, num_classes: int, patch_size: int, seq_len: int):\n        super().__init__()\n        self.patch = PatchEmbedding(3, 768, patch_size)\n        self.cls_token = nn.Parameter(torch.zeros(1, 1, 768))\n        config = DistilBertConfig.from_pretrained(pretrained_name)\n        self.bert = DistilBertModel.from_pretrained(pretrained_name)\n        self.classifier = nn.Linear(config.hidden_size, num_classes)\n\n    def forward(self, x):\n        B = x.size(0)\n        toks = self.patch(x)\n        cls = self.cls_token.expand(B, -1, -1)\n        inputs = torch.cat([cls, toks], dim=1)\n        attn_mask = torch.ones(inputs.size()[:2], dtype=torch.long, device=inputs.device)\n        outputs = self.bert(inputs_embeds=inputs, attention_mask=attn_mask)\n        pooled = outputs.last_hidden_state[:, 0]\n        return self.classifier(pooled)\n\n# -----------------------------------------------------------------------------\n# Model factory\n# -----------------------------------------------------------------------------\n\ndef get_model(cfg: Any, num_classes: int):\n    name = str(cfg.model.name).lower()\n    if name == \"mobilenetv2\":\n        return MobileNetV2Classifier(\n            width_mult=float(cfg.model.width_mult),\n            num_classes=num_classes,\n            pretrained=cfg.model.pretrained,\n            dropout=cfg.model.dropout,\n        )\n    elif name.startswith(\"distilbert\") and cfg.dataset.name.lower() == \"cifar-10\":\n        return DistilBERTImageClassifier(\n            pretrained_name=cfg.model.name,\n            num_classes=num_classes,\n            patch_size=cfg.model.modality_adapter.patch_size,\n            seq_len=cfg.model.modality_adapter.sequence_length,\n        )\n    elif name.startswith(\"distilbert\"):\n        return DistilBERTSequenceClassifier(cfg.model.name, num_classes)\n    elif cfg.model.get(\"input_adapter\", {}).get(\"type\") == \"char_cnn\":\n        # CharCNN for alpaca\n        from .preprocess import CharTokenizer\n        tok = CharTokenizer()\n        return CharCNNClassifier(tok.vocab_size(), cfg.model.input_adapter.embedding_dim, num_classes)\n    else:\n        raise ValueError(f\"Unsupported model configuration {cfg.model}\")\n",
    "main_py": "import os\nimport subprocess\nimport sys\nfrom pathlib import Path\nfrom typing import List\n\nimport hydra\nfrom omegaconf import DictConfig\n\n\ndef tee_output(stream, log_file):\n    \"\"\"Generator reading stream and writing to both stdout and file\"\"\"\n    for line in iter(stream.readline, b\"\"):\n        sys.stdout.buffer.write(line)\n        log_file.buffer.write(line)\n        sys.stdout.flush()\n        log_file.flush()\n\n\n@hydra.main(version_base=None, config_path=\"../config\", config_name=\"config\")\ndef main(cfg: DictConfig):\n    results_dir = Path(cfg.results_dir)\n    results_dir.mkdir(parents=True, exist_ok=True)\n\n    run_ids: List[str]\n    if cfg.run == \"all\":\n        run_ids = list(cfg.runs.keys())\n    else:\n        run_ids = [cfg.run]\n\n    for run_id in run_ids:\n        out_log = results_dir / run_id / \"stdout.log\"\n        err_log = results_dir / run_id / \"stderr.log\"\n        out_log.parent.mkdir(parents=True, exist_ok=True)\n\n        cmd = [\n            sys.executable,\n            \"-u\",\n            \"-m\",\n            \"src.train\",\n            f\"run={run_id}\",\n            f\"results_dir={cfg.results_dir}\"\n        ]\n        print(f\"Launching {' '.join(cmd)}\")\n        proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n\n        with open(out_log, \"w\", encoding=\"utf-8\") as fout, open(err_log, \"w\", encoding=\"utf-8\") as ferr:\n            # Read until process finishes\n            tee_output(proc.stdout, fout)\n            tee_output(proc.stderr, ferr)\n        proc.wait()\n        if proc.returncode != 0:\n            raise RuntimeError(f\"Run {run_id} failed. Check logs.\")\n\n    # After all runs – evaluation\n    eval_cmd = [sys.executable, \"-u\", \"-m\", \"src.evaluate\", f\"results_dir={cfg.results_dir}\"]\n    subprocess.check_call(eval_cmd)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "pyproject_toml": "[project]\nname = \"hydra-experiments\"\nversion = \"0.1.0\"\ndependencies = [\n    \"torch>=2.0.0\",\n    \"torchvision>=0.15.0\",\n    \"transformers>=4.34.0\",\n    \"hydra-core>=1.3.2\",\n    \"optuna>=3.4.0\",\n    \"wandb>=0.15.0\",\n    \"matplotlib>=3.7.0\",\n    \"pandas>=2.0.0\",\n    \"scikit-learn>=1.3.0\"\n]\n\n[tool.setuptools.packages.find]\nwhere = [\"src\"]\n",
    "config_yaml": "# Root Hydra configuration\n\nrun: all  # default to run all experiments\nresults_dir: results\n\nwandb:\n  entity: gengaru617\n  project: 251014-test\n\nruns:\n  comparative-2-MobileNetV2-0.5-3.5M-CIFAR-10:\n    run_id: comparative-2-MobileNetV2-0.5-3.5M-CIFAR-10\n    method: comparative-2\n    model:\n      name: MobileNetV2\n      variant: 0.5\n      parameters: 3.5M\n      pretrained: false\n      width_mult: 0.5\n      dropout: 0.2\n    dataset:\n      name: CIFAR-10\n      splits:\n        train: 45000\n        val: 5000\n        test: 10000\n      image_size: 32\n      normalization:\n        mean: [0.4914, 0.4822, 0.4465]\n        std:  [0.2023, 0.1994, 0.2010]\n      augmentations:\n        random_crop: true\n        random_flip: horizontal\n    training:\n      epochs: 50\n      batch_size: 64\n      learning_rate: 0.05\n      optimizer: sgd\n      momentum: 0.9\n      weight_decay: 0.0005\n      lr_scheduler:\n        type: cosine\n        T_max: 50\n    optuna:\n      n_trials: 25\n    wandb:\n      run_name: MobileNetV2-0.5-CIFAR10\n      tags: [vision, mobilenet]\n\n  comparative-2-MobileNetV2-0.5-3.5M-alpaca-cleaned:\n    run_id: comparative-2-MobileNetV2-0.5-3.5M-alpaca-cleaned\n    method: comparative-2\n    model:\n      name: MobileNetV2\n      variant: 0.5\n      parameters: 3.5M\n      pretrained: false\n      input_adapter:\n        type: char_cnn\n        embedding_dim: 256\n    dataset:\n      name: alpaca-cleaned\n      task: instruction_following\n      max_seq_length: 512\n      tokenizer: char\n    training:\n      epochs: 3\n      batch_size: 16\n      learning_rate: 0.001\n      optimizer: adam\n      weight_decay: 0.01\n      gradient_accumulation_steps: 2\n    optuna:\n      n_trials: 15\n    wandb:\n      run_name: MobileNetV2-charCNN-Alpaca\n      tags: [nlp, mobilenet, charcnn]\n\n  comparative-2-DistilBERT-base-66M-CIFAR-10:\n    run_id: comparative-2-DistilBERT-base-66M-CIFAR-10\n    method: comparative-2\n    model:\n      name: distilbert-base-uncased\n      parameters: 66M\n      pretrained: true\n      modality_adapter:\n        type: linear_patch_embedding\n        patch_size: 4\n        sequence_length: 64\n    dataset:\n      name: CIFAR-10\n      splits:\n        train: 45000\n        val: 5000\n        test: 10000\n      image_size: 32\n      normalization:\n        mean: [0.4914, 0.4822, 0.4465]\n        std:  [0.2023, 0.1994, 0.2010]\n    training:\n      epochs: 10\n      batch_size: 32\n      learning_rate: 0.0001\n      optimizer: adamw\n      weight_decay: 0.01\n      lr_scheduler:\n        type: linear\n        warmup_steps: 500\n    optuna:\n      n_trials: 20\n    wandb:\n      run_name: DistilBERT-CIFAR10\n      tags: [vision, distilbert]\n\n  comparative-2-DistilBERT-base-66M-alpaca-cleaned:\n    run_id: comparative-2-DistilBERT-base-66M-alpaca-cleaned\n    method: comparative-2\n    model:\n      name: distilbert-base-uncased\n      parameters: 66M\n      pretrained: true\n    dataset:\n      name: alpaca-cleaned\n      task: instruction_following\n      max_seq_length: 512\n      tokenizer: sentencepiece\n    training:\n      epochs: 3\n      batch_size: 16\n      learning_rate: 2e-5\n      optimizer: adamw\n      weight_decay: 0.01\n      lr_scheduler:\n        type: linear\n        warmup_steps: 500\n    optuna:\n      n_trials: 25\n    wandb:\n      run_name: DistilBERT-Alpaca\n      tags: [nlp, distilbert]\n\n  # End of runs list\n\n# End of root config\n\n# vim:ft=yaml\n"
}
